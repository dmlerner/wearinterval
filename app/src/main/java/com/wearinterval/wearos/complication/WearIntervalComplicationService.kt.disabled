package com.wearinterval.wearos.complication

import androidx.wear.watchface.complications.data.ComplicationData
import androidx.wear.watchface.complications.data.ComplicationType
import androidx.wear.watchface.complications.data.PlainComplicationText
import androidx.wear.watchface.complications.data.ShortTextComplicationData
import androidx.wear.watchface.complications.datasource.ComplicationRequest
import androidx.wear.watchface.complications.datasource.ComplicationDataSourceService
import com.wearinterval.domain.repository.WearOsRepository
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.runBlocking
import javax.inject.Inject

/**
 * Simple Wear OS Complication Service for WearInterval timer application.
 */
@AndroidEntryPoint
class WearIntervalComplicationService : ComplicationDataSourceService() {

    @Inject
    lateinit var wearOsRepository: WearOsRepository

    override fun onComplicationRequest(request: ComplicationRequest): ComplicationData {
        return try {
            // For now, return simple text-based complications
            when (request.complicationType) {
                ComplicationType.SHORT_TEXT -> {
                    ShortTextComplicationData.Builder(
                        text = PlainComplicationText.Builder("Timer").build(),
                        contentDescription = PlainComplicationText.Builder("WearInterval Timer").build()
                    ).build()
                }
                ComplicationType.LONG_TEXT -> {
                    androidx.wear.watchface.complications.data.LongTextComplicationData.Builder(
                        text = PlainComplicationText.Builder("WearInterval").build(),
                        contentDescription = PlainComplicationText.Builder("WearInterval Timer").build()
                    ).build()
                }
                else -> {
                    // Return basic short text for unsupported types
                    ShortTextComplicationData.Builder(
                        text = PlainComplicationText.Builder("Timer").build(),
                        contentDescription = PlainComplicationText.Builder("WearInterval Timer").build()
                    ).build()
                }
            }
        } catch (e: Exception) {
            // Fallback to basic short text
            ShortTextComplicationData.Builder(
                text = PlainComplicationText.Builder("Error").build(),
                contentDescription = PlainComplicationText.Builder("Timer Error").build()
            ).build()
        }
    }

    override fun getPreviewData(type: ComplicationType): ComplicationData {
        return when (type) {
            ComplicationType.SHORT_TEXT -> {
                ShortTextComplicationData.Builder(
                    text = PlainComplicationText.Builder("45s").build(),
                    contentDescription = PlainComplicationText.Builder("Timer Preview").build()
                )
                    .setTitle(PlainComplicationText.Builder("3/20").build())
                    .build()
            }
            ComplicationType.LONG_TEXT -> {
                androidx.wear.watchface.complications.data.LongTextComplicationData.Builder(
                    text = PlainComplicationText.Builder("45s - Lap 3/20").build(),
                    contentDescription = PlainComplicationText.Builder("Timer Preview").build()
                )
                    .setTitle(PlainComplicationText.Builder("WearInterval").build())
                    .build()
            }
            else -> {
                // Return basic short text for unsupported types
                ShortTextComplicationData.Builder(
                    text = PlainComplicationText.Builder("Timer").build(),
                    contentDescription = PlainComplicationText.Builder("Timer Preview").build()
                ).build()
            }
        }
    }
}