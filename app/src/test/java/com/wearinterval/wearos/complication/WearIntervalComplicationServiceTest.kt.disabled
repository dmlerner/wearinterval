package com.wearinterval.wearos.complication

import androidx.wear.watchface.complications.data.*
import androidx.wear.watchface.complications.datasource.ComplicationRequest
import com.google.common.truth.Truth.assertThat
import com.wearinterval.domain.model.TimerConfiguration
import com.wearinterval.domain.model.TimerState
import com.wearinterval.domain.repository.TimerRepository
import com.wearinterval.domain.repository.WearOsRepository
import com.wearinterval.test.util.MainDispatcherRule
import io.mockk.every
import io.mockk.mockk
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Rule
import org.junit.Test

@ExperimentalCoroutinesApi
class WearIntervalComplicationServiceTest {

  @get:Rule val mainDispatcherRule = MainDispatcherRule()

  private val mockWearOsRepository = mockk<WearOsRepository>()
  private val mockTimerRepository = mockk<TimerRepository>()
  private lateinit var complicationService: WearIntervalComplicationService

  private val mockTimerState =
    TimerState(
      state = TimerState.State.RUNNING,
      configuration =
        TimerConfiguration(laps = 10, workDurationMs = 30000L, restDurationMs = 15000L),
      currentLap = 3,
      remainingTimeMs = 45000L,
      isResting = false
    )

  @Before
  fun setup() {
    every { mockTimerRepository.timerState } returns flowOf(mockTimerState)

    complicationService = WearIntervalComplicationService()
    complicationService.wearOsRepository = mockWearOsRepository
    complicationService.timerRepository = mockTimerRepository
  }

  @Test
  fun `onComplicationRequest returns short text complication data with timer info`() = runTest {
    // Given
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.SHORT_TEXT,
        immediateResponseRequired = false
      )

    // When
    val result = complicationService.onComplicationRequest(request)

    // Then
    assertThat(result).isInstanceOf(ShortTextComplicationData::class.java)
    val shortTextResult = result as ShortTextComplicationData
    assertThat(shortTextResult.text.getTextAt(null, 0)).isEqualTo("45s")
    assertThat(shortTextResult.title?.getTextAt(null, 0)).isEqualTo("Work")
  }

  @Test
  fun `onComplicationRequest returns long text complication data with full info`() = runTest {
    // Given
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.LONG_TEXT,
        immediateResponseRequired = false
      )

    // When
    val result = complicationService.onComplicationRequest(request)

    // Then
    assertThat(result).isInstanceOf(LongTextComplicationData::class.java)
    val longTextResult = result as LongTextComplicationData
    assertThat(longTextResult.text.getTextAt(null, 0)).contains("45s")
    assertThat(longTextResult.text.getTextAt(null, 0)).contains("Work")
    assertThat(longTextResult.text.getTextAt(null, 0)).contains("3/10")
  }

  @Test
  fun `onComplicationRequest returns ranged value complication data`() = runTest {
    // Given
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.RANGED_VALUE,
        immediateResponseRequired = false
      )

    // When
    val result = complicationService.onComplicationRequest(request)

    // Then
    assertThat(result).isInstanceOf(RangedValueComplicationData::class.java)
    val rangedResult = result as RangedValueComplicationData
    assertThat(rangedResult.min).isEqualTo(0f)
    assertThat(rangedResult.max).isEqualTo(100f)
    assertThat(rangedResult.text?.getTextAt(null, 0)).isEqualTo("45s")
  }

  @Test
  fun `onComplicationRequest returns small image complication data`() = runTest {
    // Given
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.SMALL_IMAGE,
        immediateResponseRequired = false
      )

    // When
    val result = complicationService.onComplicationRequest(request)

    // Then
    assertThat(result).isInstanceOf(SmallImageComplicationData::class.java)
  }

  @Test
  fun `onComplicationRequest returns monochromatic image complication data`() = runTest {
    // Given
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.MONOCHROMATIC_IMAGE,
        immediateResponseRequired = false
      )

    // When
    val result = complicationService.onComplicationRequest(request)

    // Then
    assertThat(result).isInstanceOf(MonochromaticImageComplicationData::class.java)
  }

  @Test
  fun `getPreviewData returns short text preview with timer data`() {
    // When
    val result = complicationService.getPreviewData(ComplicationType.SHORT_TEXT)

    // Then
    assertThat(result).isInstanceOf(ShortTextComplicationData::class.java)
    val shortTextResult = result as ShortTextComplicationData
    assertThat(shortTextResult.text.getTextAt(null, 0)).isEqualTo("45s")
    assertThat(shortTextResult.title?.getTextAt(null, 0)).isEqualTo("Work")
  }

  @Test
  fun `getPreviewData returns ranged value preview with progress data`() {
    // When
    val result = complicationService.getPreviewData(ComplicationType.RANGED_VALUE)

    // Then
    assertThat(result).isInstanceOf(RangedValueComplicationData::class.java)
    val rangedResult = result as RangedValueComplicationData
    assertThat(rangedResult.value).isEqualTo(75f)
    assertThat(rangedResult.text?.getTextAt(null, 0)).isEqualTo("45s")
  }

  @Test
  fun `onComplicationRequest handles repository errors gracefully`() = runTest {
    // Given - repository throws exception
    every { mockTimerRepository.timerState } throws RuntimeException("Test error")
    val request =
      ComplicationRequest(
        complicationInstanceId = 1,
        complicationType = ComplicationType.SHORT_TEXT,
        immediateResponseRequired = false
      )

    // When/Then - should not throw exception
    val result = complicationService.onComplicationRequest(request)

    // Should still return error complication
    assertThat(result).isInstanceOf(ShortTextComplicationData::class.java)
    val shortTextResult = result as ShortTextComplicationData
    assertThat(shortTextResult.text.getTextAt(null, 0)).isEqualTo("Error")
  }
}
